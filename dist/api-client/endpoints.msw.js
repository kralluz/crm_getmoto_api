"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCRMAPIGetMotoMock = exports.getGetSummaryCategoriesMockHandler = exports.getGetSummaryMockHandler = exports.getGetStockMovementsMockHandler = exports.getPostStockMovementsMockHandler = exports.getDeleteIdMockHandler = exports.getPutIdMockHandler = exports.getGetIdMockHandler = exports.getPostMockHandler = exports.getGetMockHandler = exports.getGetMeMockHandler = exports.getPostLoginMockHandler = exports.getPostRegisterMockHandler = void 0;
/**
 * Generated by orval v7.13.2 🍺
 * Do not edit manually.
 * CRM API GetMoto
 * API para gestão de oficina de motos - Sistema de CRM completo
 * OpenAPI spec version: 1.0.0
 */
const msw_1 = require("msw");
const getPostRegisterMockHandler = (overrideResponse, options) => {
    return msw_1.http.post('*/register', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getPostRegisterMockHandler = getPostRegisterMockHandler;
const getPostLoginMockHandler = (overrideResponse, options) => {
    return msw_1.http.post('*/login', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getPostLoginMockHandler = getPostLoginMockHandler;
const getGetMeMockHandler = (overrideResponse, options) => {
    return msw_1.http.get('*/me', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getGetMeMockHandler = getGetMeMockHandler;
const getGetMockHandler = (overrideResponse, options) => {
    return msw_1.http.get('*/', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getGetMockHandler = getGetMockHandler;
const getPostMockHandler = (overrideResponse, options) => {
    return msw_1.http.post('*/', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getPostMockHandler = getPostMockHandler;
const getGetIdMockHandler = (overrideResponse, options) => {
    return msw_1.http.get('*/:id', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getGetIdMockHandler = getGetIdMockHandler;
const getPutIdMockHandler = (overrideResponse, options) => {
    return msw_1.http.put('*/:id', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getPutIdMockHandler = getPutIdMockHandler;
const getDeleteIdMockHandler = (overrideResponse, options) => {
    return msw_1.http.delete('*/:id', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getDeleteIdMockHandler = getDeleteIdMockHandler;
const getPostStockMovementsMockHandler = (overrideResponse, options) => {
    return msw_1.http.post('*/stock/movements', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getPostStockMovementsMockHandler = getPostStockMovementsMockHandler;
const getGetStockMovementsMockHandler = (overrideResponse, options) => {
    return msw_1.http.get('*/stock/movements', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getGetStockMovementsMockHandler = getGetStockMovementsMockHandler;
const getGetSummaryMockHandler = (overrideResponse, options) => {
    return msw_1.http.get('*/summary', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getGetSummaryMockHandler = getGetSummaryMockHandler;
const getGetSummaryCategoriesMockHandler = (overrideResponse, options) => {
    return msw_1.http.get('*/summary/categories', async (info) => {
        await (0, msw_1.delay)(1000);
        if (typeof overrideResponse === 'function') {
            await overrideResponse(info);
        }
        return new msw_1.HttpResponse(null, { status: 200,
        });
    }, options);
};
exports.getGetSummaryCategoriesMockHandler = getGetSummaryCategoriesMockHandler;
const getCRMAPIGetMotoMock = () => [
    (0, exports.getPostRegisterMockHandler)(),
    (0, exports.getPostLoginMockHandler)(),
    (0, exports.getGetMeMockHandler)(),
    (0, exports.getGetMockHandler)(),
    (0, exports.getPostMockHandler)(),
    (0, exports.getGetIdMockHandler)(),
    (0, exports.getPutIdMockHandler)(),
    (0, exports.getDeleteIdMockHandler)(),
    (0, exports.getPostStockMovementsMockHandler)(),
    (0, exports.getGetStockMovementsMockHandler)(),
    (0, exports.getGetSummaryMockHandler)(),
    (0, exports.getGetSummaryCategoriesMockHandler)()
];
exports.getCRMAPIGetMotoMock = getCRMAPIGetMotoMock;
//# sourceMappingURL=endpoints.msw.js.map