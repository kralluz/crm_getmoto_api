generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cash_flow {
  cash_flow_id        BigInt             @id @default(autoincrement())
  service_order_id    BigInt?
  service_realized_id BigInt?
  service_product_id  BigInt?
  amount              Decimal            @db.Decimal(12, 2)
  amount_cents        Int                @default(0)
  direction           String
  occurred_at         DateTime           @default(now())
  note                String?
  is_active           Boolean            @default(true)
  created_at          DateTime           @default(now())
  updated_at          DateTime           @default(now())
  service_order       service_order?     @relation(fields: [service_order_id], references: [service_order_id], onUpdate: NoAction)
  service_products    service_products?  @relation(fields: [service_product_id], references: [service_product_id], onUpdate: NoAction)
  services_realized   services_realized? @relation(fields: [service_realized_id], references: [services_realized_id], onUpdate: NoAction)

  @@index([service_order_id], map: "idx_cash_flow_order")
  @@index([occurred_at], map: "idx_cash_flow_time")
}

model product_category {
  product_category_id   BigInt     @id @default(autoincrement())
  product_category_name String     @unique(map: "uq_product_category_name")
  is_active             Boolean    @default(true)
  created_at            DateTime   @default(now())
  updated_at            DateTime   @default(now())
  products              products[]
}

model products {
  product_id       BigInt             @id @default(autoincrement())
  category_id      BigInt
  product_name     String
  quantity         Decimal            @default(0) @db.Decimal(12, 3)
  quantity_alert   Decimal            @default(0) @db.Decimal(12, 3)
  buy_price        Decimal            @default(0) @db.Decimal(12, 2)
  sell_price       Decimal            @default(0) @db.Decimal(12, 2)
  buy_price_cents  Int                @default(0)
  sell_price_cents Int                @default(0)
  is_active        Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now())
  product_category product_category   @relation(fields: [category_id], references: [product_category_id], onUpdate: NoAction)
  service_products service_products[]
  stock_move       stock_move[]

  @@index([category_id], map: "idx_products_category")
}

model service {
  service_id         BigInt              @id @default(autoincrement())
  service_name       String              @unique(map: "uq_service_name")
  service_cost       Decimal             @db.Decimal(12, 2)
  service_cost_cents Int                 @default(0)
  is_active          Boolean             @default(true)
  created_at         DateTime            @default(now())
  updated_at         DateTime            @default(now())
  service_order      service_order[]
  services_realized  services_realized[]
}

model service_order {
  service_order_id             BigInt              @id @default(autoincrement())
  service_id                   BigInt?
  professional_name            String?
  vehicle_id                   BigInt?
  customer_name                String?
  service_description          String?
  diagnosis                    String?
  status                       String              @default("draft")
  finalized_at                 DateTime?
  estimated_labor_cost         Decimal?            @db.Decimal(12, 2)
  estimated_labor_cost_cents   Int?
  notes                        String?
  is_active                    Boolean             @default(true)
  created_at                   DateTime            @default(now())
  updated_at                   DateTime            @default(now())
  cash_flow            cash_flow[]
  vehicles             vehicles?           @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: Restrict, onUpdate: NoAction)
  service              service?            @relation(fields: [service_id], references: [service_id], onDelete: Restrict, onUpdate: NoAction)
  service_products     service_products[]
  services_realized    services_realized[]
}

model service_products {
  service_product_id BigInt        @id @default(autoincrement())
  product_id         BigInt
  product_qtd        Decimal       @db.Decimal(12, 3)
  service_order_id   BigInt
  is_active          Boolean       @default(true)
  created_at         DateTime      @default(now())
  updated_at         DateTime      @default(now())
  cash_flow          cash_flow[]
  products           products      @relation(fields: [product_id], references: [product_id], onUpdate: NoAction)
  service_order      service_order @relation(fields: [service_order_id], references: [service_order_id], onUpdate: NoAction)

  @@index([service_order_id], map: "idx_service_products_order")
}

model services_realized {
  services_realized_id BigInt        @id @default(autoincrement())
  service_id           BigInt
  service_order_id     BigInt
  service_qtd          Decimal       @db.Decimal(12, 3)
  is_active            Boolean       @default(true)
  created_at           DateTime      @default(now())
  updated_at           DateTime      @default(now())
  cash_flow            cash_flow[]
  service              service       @relation(fields: [service_id], references: [service_id], onUpdate: NoAction)
  service_order        service_order @relation(fields: [service_order_id], references: [service_order_id], onUpdate: NoAction)

  @@index([service_order_id], map: "idx_services_realized_order")
}

model stock_move {
  stock_move_id BigInt   @id @default(autoincrement())
  product_id    BigInt
  user_id       BigInt?
  move_type     String
  quantity      Decimal  @db.Decimal(12, 3)
  notes         String?
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  products      products @relation(fields: [product_id], references: [product_id], onUpdate: NoAction)
  users         User?    @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)

  @@index([product_id, created_at], map: "idx_stock_move_product_time")
}

model User {
  user_id       BigInt       @id @default(autoincrement())
  name          String
  position      String?
  is_active     Boolean      @default(true)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @default(now())
  email         String?      @unique
  password_hash String?
  role          String?      @default("ATTENDANT")
  stock_move    stock_move[]

  @@map("users")
}

model vehicles {
  vehicle_id    BigInt          @id @default(autoincrement())
  brand         String?
  model         String?
  color         String?
  plate         String          @unique(map: "uq_vehicles_plate")
  year          Int?
  is_active     Boolean         @default(true)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  service_order service_order[]
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
  CHECK
}

enum StockMovementType {
  ENTRY
  EXIT
  ADJUSTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
}


