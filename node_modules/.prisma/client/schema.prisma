// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  MECHANIC
  ATTENDANT
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  WAITING_PARTS
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
  CHECK
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum StockMovementType {
  ENTRY
  EXIT
  ADJUSTMENT
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(ATTENDANT)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services  Service[]
  cashFlows CashFlow[]

  @@map("users")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String
  cpf       String?  @unique
  address   String?
  city      String?
  state     String?
  zipCode   String?
  notes     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  motorcycles Motorcycle[]
  services    Service[]

  @@map("customers")
}

model Motorcycle {
  id         String   @id @default(uuid())
  customerId String
  brand      String
  model      String
  year       Int
  plate      String   @unique
  color      String?
  mileage    Int?
  notes      String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer  @relation(fields: [customerId], references: [id])
  services Service[]

  @@map("motorcycles")
}

model Service {
  id               String        @id @default(uuid())
  customerId       String
  motorcycleId     String
  userId           String
  description      String
  diagnosis        String?
  status           ServiceStatus @default(PENDING)
  startDate        DateTime      @default(now())
  estimatedEndDate DateTime?
  endDate          DateTime?
  laborCost        Decimal       @default(0) @db.Decimal(10, 2)
  totalCost        Decimal       @default(0) @db.Decimal(10, 2)
  notes            String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  customer     Customer      @relation(fields: [customerId], references: [id])
  motorcycle   Motorcycle    @relation(fields: [motorcycleId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  serviceItems ServiceItem[]
  payments     Payment[]

  @@map("services")
}

model ServiceItem {
  id          String  @id @default(uuid())
  serviceId   String
  productId   String?
  description String
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  isLabor     Boolean @default(false)

  service Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("service_items")
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String?
  brand         String?
  code          String?  @unique
  barcode       String?  @unique
  category      String?
  costPrice     Decimal  @db.Decimal(10, 2)
  salePrice     Decimal  @db.Decimal(10, 2)
  stockQuantity Int      @default(0)
  minStock      Int      @default(0)
  maxStock      Int?
  unit          String   @default("UN")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  serviceItems   ServiceItem[]
  stockMovements StockMovement[]

  @@map("products")
}

model StockMovement {
  id         String            @id @default(uuid())
  productId  String
  type       StockMovementType
  quantity   Int
  unitPrice  Decimal?          @db.Decimal(10, 2)
  totalPrice Decimal?          @db.Decimal(10, 2)
  reason     String?
  reference  String?
  date       DateTime          @default(now())
  createdAt  DateTime          @default(now())

  product Product @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

model Payment {
  id          String        @id @default(uuid())
  serviceId   String
  amount      Decimal       @db.Decimal(10, 2)
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  dueDate     DateTime?
  paymentDate DateTime?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  service  Service   @relation(fields: [serviceId], references: [id])
  cashFlow CashFlow?

  @@map("payments")
}

model CashFlow {
  id          String          @id @default(uuid())
  paymentId   String?         @unique
  userId      String
  type        TransactionType
  category    String
  amount      Decimal         @db.Decimal(10, 2)
  description String
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  payment Payment? @relation(fields: [paymentId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  @@map("cash_flow")
}
